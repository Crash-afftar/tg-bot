import asyncio
import logging
import yaml
import re
import os
import time
import socket
import sys
import json
from telethon import TelegramClient
from telethon.errors import (
    ChannelPrivateError, 
    InviteHashExpiredError, 
    InviteHashInvalidError,
    FloodWaitError
)
from telethon.tl.types import PeerChannel
from filters import filter_message

# Перевірка на одночасний запуск
def is_process_running():
    try:
        # Спроба створити сокет на локальному порту
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.bind(('localhost', 51423))  # Використовуємо унікальний порт
        sock.listen(1)
        return False  # Порт вільний, інший екземпляр не запущено
    except socket.error:
        return True  # Порт зайнятий, інший екземпляр запущено

# Створення класу фільтру для виключення Telethon логів
class TelethonFilter(logging.Filter):
    def filter(self, record):
        # Якщо лог починається з відомих Telethon повідомлень, фільтруємо його
        if any(record.getMessage().startswith(prefix) for prefix in 
              ["Handling", "Receiving", "Assigned", "Encrypting", "Encrypted", "Waiting", "Got difference"]):
            return False
        return True

# Налаштування розширеного логування
def setup_logging():
    # Основний логер
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)
    
    # Форматер для логів
    formatter = logging.Formatter('%(asctime)s - %(levelname)s: %(message)s')
    
    # Обробник для файлу (зберігає всі деталі)
    file_handler = logging.FileHandler('telegram_monitor.log', encoding='utf-8')
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(formatter)
    
    # Обробник для консолі (тільки важливі повідомлення)
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)  # Тільки INFO і вище
    console_handler.setFormatter(formatter)
    console_handler.addFilter(TelethonFilter())  # Додаємо фільтр для Telethon
    
    # Додаємо обробники до логера
    root_logger.addHandler(file_handler)
    root_logger.addHandler(console_handler)
    
    # Налаштовуємо логер Telethon на нижчий рівень
    telethon_logger = logging.getLogger('telethon')
    telethon_logger.setLevel(logging.WARNING)  # Ще менше логів від Telethon

# Ініціалізуємо логування
setup_logging()

def extract_channel_identifier(link):
    """
    Витягує username та/або invite hash з посилання на канал
    
    :param link: посилання на канал
    :return: (username, invite_hash)
    """
    if not link:
        return None, None
    
    # Спроба знайти запрошувальне посилання (t.me/+HASH або t.me/joinchat/HASH)
    invite_match = re.search(r't\.me/(?:joinchat/|\+)([a-zA-Z0-9_-]+)', link)
    invite_hash = invite_match.group(1) if invite_match else None
    
    # Спроба знайти звичайне посилання (t.me/USERNAME)
    username_match = re.search(r't\.me/(?!joinchat)(?!\+)([a-zA-Z0-9_]+)', link)
    username = username_match.group(1) if username_match else None
    
    # Перевірка на випадок, якщо передано просто username без посилання
    username_only_match = re.match(r'^([a-zA-Z0-9_]+)$', link)
    if not username and not invite_hash and username_only_match:
        username = username_only_match.group(1)
    
    return username, invite_hash

class TelegramMonitor:
    def __init__(self):
        self.config = None
        self.client = None
        self.logger = logging.getLogger(__name__)
        self.config_last_modified = 0
        self.config_path = 'config.yaml'
        self.running = True
        self.connection_retries = 0
        self.max_connection_retries = 5
    
    async def load_config(self):
        """Завантаження конфігурації з файлу."""
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                self.config = yaml.safe_load(f)
                self.config_last_modified = os.path.getmtime(self.config_path)
                logging.info("Конфігурацію оновлено успішно")
                return True
        except Exception as e:
            logging.error(f"Помилка читання конфігурації: {e}")
            return False
    
    async def check_config_updates(self):
        """Періодично перевіряє, чи оновився файл конфігурації, і перезавантажує його."""
        while self.running:
            try:
                # Перевіряємо, чи змінився файл конфігурації
                current_mtime = os.path.getmtime(self.config_path)
                if current_mtime > self.config_last_modified:
                    logging.info(f"Виявлено зміни у файлі конфігурації. Перезавантаження...")
                    
                    if await self.load_config():
                        logging.info("Конфігурацію успішно перезавантажено")
                    else:
                        logging.error("Не вдалося перезавантажити конфігурацію")
            except Exception as e:
                logging.error(f"Помилка при перевірці оновлень конфігурації: {e}", exc_info=True)
                # Продовжуємо спроби перевірки конфігурації
            
            # Перевіряємо кожні 30 секунд
            await asyncio.sleep(30)
    
    async def start_client(self):
        """Ініціалізує та запускає клієнт Telegram."""
        await self.load_config()
        
        if not self.config:
            logging.error("Немає конфігурації!")
            return
        
        # Використовуємо унікальне ім'я сесії
        session_name = f"telegram_monitor_{socket.gethostname()}"
        logging.info(f"Використовуємо сесію: {session_name}")
        
        # Створюємо клієнт з МАКСИМАЛЬНО мінімальними параметрами
        self.client = TelegramClient(
            session_name, 
            self.config['api_id'], 
            self.config['api_hash'],
            base_logger=logging.getLogger('telethon'),
            receive_updates=False,  # Вимикаємо оновлення
            auto_reconnect=False,   # Вимикаємо автоматичне перепідключення
            retry_delay=10,
            connection_retries=3,
            flood_sleep_threshold=60
        )
        
        try:
            # Підключаємося до Telegram
            await self.client.connect()
            
            # Авторизуємося, якщо потрібно
            if not await self.client.is_user_authorized():
                await self.client.start(phone=self.config['phone_number'])
                logging.info("Авторизацію завершено успішно")
            
            logging.info("Telegram клієнт підключено")
            
            # Запускаємо завдання
            self.running = True
            polling_task = asyncio.create_task(self.manual_polling())
            config_task = asyncio.create_task(self.check_config_updates())
            
            logging.info("Telegram монітор запущено")
            
            # Чекаємо завершення завдань
            try:
                await asyncio.gather(polling_task, config_task)
            except asyncio.CancelledError:
                logging.info("Завдання скасовано")
            except Exception as e:
                logging.error(f"Помилка у головному циклі: {e}", exc_info=True)
            
        except Exception as e:
            logging.error(f"Помилка запуску клієнта: {e}", exc_info=True)
            # Спроба перезапуску клієнта
            self.connection_retries += 1
            if self.connection_retries < self.max_connection_retries:
                retry_delay = 10 * (2 ** (self.connection_retries - 1))  # Експоненційна затримка
                logging.info(f"Спроба перезапуску клієнта через {retry_delay} секунд... (спроба {self.connection_retries}/{self.max_connection_retries})")
                await asyncio.sleep(retry_delay)
                return await self.start_client()
            else:
                logging.critical(f"Досягнуто максимальної кількості спроб підключення ({self.max_connection_retries}). Завершення роботи.")
                self.running = False
        finally:
            # Закриваємо з'єднання при виході
            if self.client and self.client.is_connected():
                await self.client.disconnect()
                logging.info("З'єднання з Telegram закрито")
            
    async def manual_polling(self):
        """Власний цикл моніторингу каналів."""
        # Зберігаємо останні повідомлення
        last_message_ids = {}
        
        # Інтервал перевірки каналів (секунди)
        # Збільшення інтервалу зменшує навантаження на сервер і ризик блокування
        poll_interval = 15
        
        logging.info(f"Запуск власного циклу моніторингу з інтервалом {poll_interval} секунд")
        
        try:
            while self.running:
                try:
                    # Перевіряємо підключення
                    if not self.client.is_connected():
                        logging.warning("Втрачено з'єднання з Telegram. Перепідключення...")
                        await self.client.connect()
                        if not self.client.is_connected():
                            logging.error("Не вдалося перепідключитися. Чекаємо 30 секунд...")
                            await asyncio.sleep(30)
                            continue
                    
                    # Отримуємо список ID каналів для моніторингу
                    channel_ids = [int(channel_config['channel_id']) for channel_config in self.config.get('channels', [])]
                    
                    if not channel_ids:
                        logging.warning("Не знайдено жодного каналу для моніторингу!")
                        await asyncio.sleep(poll_interval)
                        continue
                    
                    for channel_id in channel_ids:
                        try:
                            # Отримуємо entity каналу 
                            channel_entity = await self.client.get_entity(PeerChannel(channel_id))
                            channel_title = channel_entity.title
                            
                            # Отримуємо останні повідомлення
                            messages = await self.client.get_messages(channel_entity, limit=5)
                            
                            if not messages:
                                # logging.debug(f"Нема повідомлень у каналі {channel_title}")
                                continue
                            
                            # Ініціалізуємо останній ID, якщо потрібно
                            if channel_id not in last_message_ids:
                                last_message_ids[channel_id] = messages[0].id
                                logging.info(f"Встановлено початковий ID {last_message_ids[channel_id]} для каналу {channel_title}")
                                continue
                            
                            # Перевіряємо нові повідомлення
                            last_id = last_message_ids[channel_id]
                            new_messages = [msg for msg in messages if msg.id > last_id]
                            
                            if new_messages:
                                logging.info(f"Знайдено {len(new_messages)} нових повідомлень у каналі {channel_title}")
                                
                                # Сортуємо повідомлення за ID (від старого до нового)
                                new_messages.sort(key=lambda msg: msg.id)
                                
                                # Знаходимо налаштування цього каналу
                                channel_config = next(
                                    (cfg for cfg in self.config.get('channels', []) 
                                     if int(cfg['channel_id']) == channel_id), 
                                    None
                                )
                                
                                if not channel_config:
                                    logging.warning(f"Не знайдено конфігурацію для каналу {channel_id}")
                                    continue
                                
                                keywords = channel_config.get('keywords', [])
                                
                                # Обробляємо кожне нове повідомлення
                                for message in new_messages:
                                    message_text = message.text or ''
                                    logging.info(f"Отримано нове повідомлення з каналу: {channel_title}")
                                    logging.info(f"Текст повідомлення: {message_text[:100]}...")
                                    
                                    # Застосовуємо фільтр за ключовими словами
                                    should_forward = not keywords or filter_message(message_text, keywords)
                                    
                                    if should_forward:
                                        target_channel_id = self.config.get('target_channel_id')
                                        if target_channel_id:
                                            await self.client.send_message(
                                                PeerChannel(int(target_channel_id)), 
                                                message_text
                                            )
                                            logging.info(f"Переслано повідомлення в канал {target_channel_id}")
                                        else:
                                            logging.error("Не вказано ID цільового каналу")
                                    else:
                                        logging.info(f"Повідомлення не відповідає фільтрам: {keywords}")
                                
                                # Оновлюємо останній ID
                                last_message_ids[channel_id] = new_messages[-1].id
                            
                        except FloodWaitError as e:
                            logging.warning(f"Потрібно почекати {e.seconds} секунд перед наступним запитом")
                            # Збільшуємо інтервал опитування, щоб уникнути подальших блокувань
                            poll_interval = max(poll_interval, e.seconds + 5)
                            logging.info(f"Інтервал моніторингу збільшено до {poll_interval} секунд")
                            await asyncio.sleep(e.seconds)
                        except Exception as e:
                            logging.error(f"Помилка при моніторингу каналу {channel_id}: {e}")
                    
                    # Очищаємо старі канали з словника останніх повідомлень
                    old_channels = set(last_message_ids.keys()) - set(channel_ids)
                    for old_channel in old_channels:
                        del last_message_ids[old_channel]
                    
                except Exception as e:
                    logging.error(f"Помилка в циклі моніторингу: {e}", exc_info=True)
                
                # Чекаємо перед наступною перевіркою
                await asyncio.sleep(poll_interval)
                
        except asyncio.CancelledError:
            logging.info("Завдання моніторингу скасовано")
            raise
        except Exception as e:
            logging.error(f"Критична помилка в циклі моніторингу: {e}", exc_info=True)
            # Перезапускаємо цикл моніторингу
            if self.running:
                logging.info("Перезапуск циклу моніторингу через 30 секунд...")
                await asyncio.sleep(30)
                return await self.manual_polling()

async def main():
    # Перевірка на одночасний запуск
    if is_process_running():
        logging.error("Інший екземпляр бота вже запущено. Завершення роботи.")
        print("ПОМИЛКА: Інший екземпляр бота вже запущено!")
        sys.exit(1)
        
    try:
        monitor = TelegramMonitor()
        await monitor.start_client()
    except KeyboardInterrupt:
        logging.info("Отримано сигнал завершення роботи")
    except Exception as e:
        logging.critical(f"Критична помилка програми: {e}", exc_info=True)
    finally:
        logging.info("Програму завершено")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Програму завершено користувачем")
    except Exception as e:
        print(f"Критична помилка: {e}")
        logging.critical(f"Критична помилка при запуску програми: {e}", exc_info=True) 